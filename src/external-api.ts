/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/players/register': {
    /**
     * Register A Player
     * @description Register a new username with the
     * game.
     */
    post: operations['register_a_player_players_register_post']
    /**
     * Remove Player From Game
     * @description Delete the user from the game.
     * Player will only send their auth_token and no other data and we will invalidate it.
     */
    delete: operations['remove_player_from_game_players_register_delete']
  }
  '/rounds': {
    /**
     * Start A Round Of Play
     * @description Create a new round of play.
     * You need to have your basic auth header set in order to use this endpoint.
     */
    post: operations['start_a_round_of_play_rounds_post']
  }
  '/rounds/{round}': {
    /**
     * Get Status Of Round
     * @description Query for the current status of a round of play
     */
    get: operations['get_status_of_round_rounds__round__get']
    /**
     * Cancel A Round
     * @description Cancel a round, killing the round
     */
    delete: operations['cancel_a_round_rounds__round__delete']
  }
  '/customers/': {
    /** Create A Customer */
    post: operations['create_a_customer_customers__post']
  }
  '/users/': {
    /** Create A User */
    post: operations['create_a_user_users__post']
  }
  '/notify': {
    /**
     * Create A Notification
     * @description Mimics sending an email to the human gettng background checked.
     */
    post: operations['create_a_notification_notify_post']
  }
  '/notify/{notify_uuid}': {
    /**
     * Get Status Of Notification
     * @description Queries to see if the notification has been responded to by the user being background checked
     */
    get: operations['get_status_of_notification_notify__notify_uuid__get']
    /**
     * Cancel A Notification
     * @description Allows the player to attempt to cancel the notify if it is in flight
     */
    delete: operations['cancel_a_notification_notify__notify_uuid__delete']
  }
  '/notify/report': {
    /** Send Background Check Report */
    post: operations['send_background_check_report_notify_report_post']
  }
  '/search/{search_type}': {
    /**
     * Get Status Of Search
     * @description Get the status of the check, returns a GUID if the status is 'complete'
     */
    get: operations['get_status_of_search_search__search_type__get']
    /**
     * Create A Search
     * @description Start a check with name: {user}
     */
    post: operations['create_a_search_search__search_type__post']
  }
  '/search/{search_type}/{user}': {
    /**
     * Cancel A Search
     * @description Allows cancelling the check_name for the customer/user that are passed
     */
    delete: operations['cancel_a_search_search__search_type___user__delete']
  }
  '/': {
    /**
     * Welcome
     * @description Welcome to the game.
     */
    get: operations['welcome__get']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** Customer */
    Customer: {
      /** Customer */
      customer: string
    }
    /** CustomerReport */
    CustomerReport: {
      /** Users Sent */
      users_sent: number
      /** Completed */
      completed: number
    }
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][]
    }
    /** Message */
    Message: {
      /**
       * Message
       * @default Welcome to the game.
       */
      message?: string
    }
    /**
     * NotifyReport
     * @description User Model: contains a customer ID as 'customer' and user ID as 'user'
     */
    NotifyReport: {
      /** Customer */
      customer: string
      /** User */
      user: string
      /** Notify */
      notify: string
      /** Ssn */
      ssn: string
      /** Social */
      social: string
      /** Credit */
      credit: string
    }
    /** Player */
    Player: {
      /** Username */
      username: string
      /** Auth Token */
      auth_token?: string
    }
    /** PlayerRegister */
    PlayerRegister: {
      /** Username */
      username: string
    }
    /** Round */
    Round: {
      /** Path */
      path: string
      /** Level */
      level: number
    }
    /** RoundReport */
    RoundReport: {
      /** Customers */
      customers: {
        [key: string]: components['schemas']['CustomerReport'] | undefined
      }
      /** Total Rounds */
      total_rounds: number
      /** Next Level */
      next_level: number
    }
    /** RoundStatus */
    RoundStatus: {
      /** Path */
      path: string
      /** Level */
      level: number
      status: components['schemas']['StatusEnum']
      /** Round */
      round: string
    }
    /**
     * SearchesEnum
     * @description An enumeration.
     * @enum {string}
     */
    SearchesEnum: 'ssn' | 'credit' | 'social'
    /** Status */
    Status: {
      status: components['schemas']['StatusEnum']
    }
    /** StatusConfirmation */
    StatusConfirmation: {
      status: components['schemas']['StatusEnum']
      /** Confirmation */
      confirmation?: string
    }
    /**
     * StatusEnum
     * @description An enumeration.
     * @enum {string}
     */
    StatusEnum: 'started' | 'cancelled' | 'pending' | 'running' | 'complete' | 'rejected'
    /**
     * User
     * @description User Model: contains a customer ID as 'customer' and user ID as 'user'
     */
    User: {
      /** Customer */
      customer: string
      /** User */
      user: string
    }
    /** Uuid */
    Uuid: {
      /** Uuid */
      uuid: string
    }
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>

export interface operations {
  register_a_player_players_register_post: {
    /**
     * Register A Player
     * @description Register a new username with the
     * game.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['PlayerRegister']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Player']
        }
      }
      /** @description Not found */
      404: never
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  remove_player_from_game_players_register_delete: {
    /**
     * Remove Player From Game
     * @description Delete the user from the game.
     * Player will only send their auth_token and no other data and we will invalidate it.
     */
    responses: {
      /** @description Successful Response */
      204: never
      /** @description Not found */
      404: never
    }
  }
  start_a_round_of_play_rounds_post: {
    /**
     * Start A Round Of Play
     * @description Create a new round of play.
     * You need to have your basic auth header set in order to use this endpoint.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['Round']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['RoundStatus']
        }
      }
      /** @description Not found */
      404: never
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_status_of_round_rounds__round__get: {
    /**
     * Get Status Of Round
     * @description Query for the current status of a round of play
     */
    parameters: {
      path: {
        round: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['RoundStatus']
        }
      }
      /** @description Not found */
      404: never
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  cancel_a_round_rounds__round__delete: {
    /**
     * Cancel A Round
     * @description Cancel a round, killing the round
     */
    parameters: {
      path: {
        round: string
      }
    }
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          'application/json': components['schemas']['RoundStatus']
        }
      }
      /** @description Not found */
      404: never
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  create_a_customer_customers__post: {
    /** Create A Customer */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Customer']
        }
      }
      /** @description Not found */
      404: never
    }
  }
  create_a_user_users__post: {
    /** Create A User */
    requestBody: {
      content: {
        'application/json': components['schemas']['Customer']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['User']
        }
      }
      /** @description Not found */
      404: never
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  create_a_notification_notify_post: {
    /**
     * Create A Notification
     * @description Mimics sending an email to the human gettng background checked.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['User']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Uuid']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_status_of_notification_notify__notify_uuid__get: {
    /**
     * Get Status Of Notification
     * @description Queries to see if the notification has been responded to by the user being background checked
     */
    parameters: {
      path: {
        notify_uuid: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Status']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  cancel_a_notification_notify__notify_uuid__delete: {
    /**
     * Cancel A Notification
     * @description Allows the player to attempt to cancel the notify if it is in flight
     */
    parameters: {
      path: {
        notify_uuid: Record<string, never>
      }
    }
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          'application/json': components['schemas']['StatusConfirmation']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  send_background_check_report_notify_report_post: {
    /** Send Background Check Report */
    requestBody: {
      content: {
        'application/json': components['schemas']['NotifyReport']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['RoundReport']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_status_of_search_search__search_type__get: {
    /**
     * Get Status Of Search
     * @description Get the status of the check, returns a GUID if the status is 'complete'
     */
    parameters: {
      query: {
        customer: string
        user: string
      }
      path: {
        search_type: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['StatusConfirmation']
        }
      }
      /** @description Not found */
      404: never
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  create_a_search_search__search_type__post: {
    /**
     * Create A Search
     * @description Start a check with name: {user}
     */
    parameters: {
      path: {
        search_type: components['schemas']['SearchesEnum']
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['User']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Status']
        }
      }
      /** @description Not found */
      404: never
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  cancel_a_search_search__search_type___user__delete: {
    /**
     * Cancel A Search
     * @description Allows cancelling the check_name for the customer/user that are passed
     */
    parameters: {
      path: {
        search_type: components['schemas']['SearchesEnum']
        user: string
      }
    }
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          'application/json': components['schemas']['StatusConfirmation']
        }
      }
      /** @description Not found */
      404: never
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  welcome__get: {
    /**
     * Welcome
     * @description Welcome to the game.
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Message']
        }
      }
    }
  }
}
